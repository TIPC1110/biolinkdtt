@import url('data:text/css;base64,Ym9keSB7CiAgICBtYXJnaW46IDA7CiAgICBwYWRkaW5nOiAwOwogICAgYmFja2dyb3VuZC1jb2xvcjogIzI5MjkyOTsKfQojcGFydGljbGVzLWpzIGNhbnZhcyB7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b207CiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSk7CiAgICAtbXMtdHJhbnNmb3JtOiBzY2FsZSgxKTsKICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7CiAgICBvcGFjaXR5OiAxOwogICAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuOHMgZWFzZSwgLXdlYmtpdC10cmFuc2Zvcm0gMS40cyBlYXNlOwogICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjhzIGVhc2UsIHRyYW5zZm9ybSAxLjRzIGVhc2U7Cn0KCiNwYXJ0aWNsZXMtanMgewogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IDEwMCU7CiAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICB6LWluZGV4OiAwOwogICAgdG9wOiAwOwogICAgbGVmdDogMDsKfQoKLmZsZXggewogICAgZGlzcGxheTogZmxleDsKfQoKLmZsZXgtYm90aC1jZW50ZXIgewogICAgZGlzcGxheTogZmxleDsKICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKfQoKLmZsZXgtd3JhcCB7CiAgICBmbGV4LXdyYXA6IHdyYXA7Cn0KCi5mbGV4LWgtY2VudGVyIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKfQoKLmZsZXgtZGlyLWMgewogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKfQoKLm10LTggewogICAgbWFyZ2luLXRvcDogMTJweDsKfQoKLm10LTE2IHsKICAgIG1hcmdpbi10b3A6IDE2cHg7Cn0KCi5tdC0yNCB7CiAgICBtYXJnaW4tdG9wOiAyNHB4Owp9CgoubXQtMzIgewogICAgbWFyZ2luLXRvcDogMzJweDsKfQoKLm10LTM2IHsKICAgIG1hcmdpbi10b3A6IDQ4cHg7Cn0KCi5tLWF1dG8gewogICAgbWFyZ2luOiBhdXRvOwp9CgoubWwtNiB7CiAgICBtYXJnaW4tbGVmdDogNnB4Owp9CgoubG4taC0yMiB7CiAgICBsaW5lLWhlaWdodDogMjJweDsKfQoKLnRleHQtZnMtMTYgewogICAgZm9udC1zaXplOiAxNnB4Owp9Ci5CbG9iIHsKICAgIH0KLnBhZ2Utb3ZlcmxheSB7CiAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMSk7CiAgICAtd2Via2l0LWJhY2tkcm9wLWZpbHRlcjogYmx1cig0NXB4KTsKICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cig0NXB4KTsKICAgIHotaW5kZXg6IDEwMDsKfQoKLnBhZ2UtaW1hZ2UsCi5wYWdlLW92ZXJsYXkgewogICAgcG9zaXRpb246IGZpeGVkOwogICAgbGVmdDogMDsKICAgIHRvcDogMDsKICAgIHdpZHRoOiAxMDB2dzsKICAgIGhlaWdodDogMTAwdmg7Cn0KCi5kaXNwbGF5LWltYWdlLAoucGFnZS1pbWFnZSB7CiAgICAtby1vYmplY3QtZml0OiBjb3ZlcjsKICAgIG9iamVjdC1maXQ6IGNvdmVyOwp9CgouZGlzcGxheS1pbWFnZSB7CiAgICB3aWR0aDogOTZweDsKICAgIGhlaWdodDogOTZweDsKICAgIGRpc3BsYXk6IGJsb2NrOwogICAgYm9yZGVyLXJhZGl1czogNTAlOwp9CgoudGV4dC1jZW50ZXIgewogICAgdGV4dC1hbGlnbjogY2VudGVyOwp9CgoucGFnZS10aXRsZSB7CiAgICBtYXJnaW4tYm90dG9tOiAwOwp9CgoucGFnZS1iaW9saW5lIHsKICAgIGZvbnQtd2VpZ2h0OiA1MDA7Cn0KCi5wYWdlLWZ1bGwtd3JhcCB7CiAgICB3aWR0aDogNjgwcHg7CiAgICB6LWluZGV4OiAxMDsKfQoKLnBhZ2UtaXRlbS13cmFwIHsKICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjE1cyBjdWJpYy1iZXppZXIoMC4xNywgMC42NywgMC4yOSwgMi43MSkgMHM7Cn0KCi5wYWdlLWl0ZW0td3JhcDpob3ZlciB7CiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCkgc2NhbGUoMS4wMTUpOwp9CgoucGFnZS1pdGVtIHsKICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7Cn0KCi5wYWdlLXNvY2lhbCB7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIG1hcmdpbjogMCAxMnB4IDEycHg7Cn0KCi5wYWdlLXNvY2lhbCBzdmcgewogICAgd2lkdGg6IDI4cHg7CiAgICBoZWlnaHQ6IDI4cHg7Cn0KCi5yZWxhdGl2ZSB7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KCi5saW5rLWVhY2gtaW1hZ2UgewogICAgd2lkdGg6IDQzcHg7CiAgICBoZWlnaHQ6IDQzcHg7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICBsZWZ0OiA5cHg7CiAgICAtby1vYmplY3QtZml0OiBjb3ZlcjsKICAgIG9iamVjdC1maXQ6IGNvdmVyOwp9CgoucGFnZS1sb2dvIHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIGJvdHRvbTogMzJweDsKICAgIGxlZnQ6IGNhbGMoNTAlIC0gMTVweCk7Cn0KCi5yb3VuZGVkLW1kIHsKICAgIGJvcmRlci1yYWRpdXM6IDhweDsKfQoKLmNsb3NlLWVtYmVkIHsKICAgIHdpZHRoOiAyNXB4OwogICAgaGVpZ2h0OiAyNXB4OwogICAgYm9yZGVyLXJhZGl1czogNTAlOwogICAgYmFja2dyb3VuZDogI2ZmZjsKICAgIG9wYWNpdHk6IDAuNzsKfQoKLmVtYmVkLXdyYXAgewogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgbGVmdDogMDsKICAgIHRvcDogMDsKICAgIHdpZHRoOiAxMDAlOwp9CgouY2xvc2UtZW1iZWQ6aG92ZXIgewogICAgb3BhY2l0eTogMTsKfQoKLmN1cnNvci1wb2ludGVyIHsKICAgIGN1cnNvcjogcG9pbnRlcjsKfQoKLnBhZ2UtaXRlbS1lYWNoIHsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIGxlZnQ6IDA7CiAgICB0b3A6IDA7CiAgICB3aWR0aDogMTAwJTsKICAgIGhlaWdodDogMTAwJTsKICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICB6LWluZGV4OiAxMDsKfQoKLnNvY2lhbC1pY29uLWZpbGw6aG92ZXIgewogICAgdHJhbnNpdGlvbjogYWxsIDAuMXMgZWFzZS1pbi1vdXQ7CiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMSk7Cn0KCi5wYWdlLWl0ZW0tdGl0bGUgewogICAgZm9udC13ZWlnaHQ6IDcwMDsKICAgIG1hcmdpbi1ib3R0b206IDE2cHg7Cn0KCkBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkgewogICAgLnBhZ2UtZnVsbC13cmFwIHsKICAgICAgICB3aWR0aDogODAlOwogICAgfQp9CgoucGFnZS1iZyB7CiAgICBiYWNrZ3JvdW5kOiAjMjkyOTI5Owp9CgoucGFnZS10aXRsZSB7CiAgICBmb250LXNpemU6IDE4cHg7CiAgICBmb250LXdlaWdodDogNzAwOwp9CgoucGFnZS1iaW9saW5lIHsKICAgIGZvbnQtc2l6ZTogMTZweDsKICAgIGZvbnQtd2VpZ2h0OiA1MDA7Cn0KCi5wYWdlLWl0ZW0tdGl0bGUgewogICAgZm9udC1zaXplOiAxNnB4OwogICAgZm9udC13ZWlnaHQ6IDcwMDsKfQoKLnBhZ2UtaXRlbS1lYWNoIHsKICAgIGNvbG9yOiAjZmZmZmZmOwogICAgZm9udC1mYW1pbHk6ICJJbnRlciIsIHNhbnMtc2VyaWY7CiAgICBmb250LXNpemU6IDE3cHg7CiAgICBmb250LXdlaWdodDogMTAwOwogICAgYm9yZGVyLXJhZGl1czogOHB4Owp9CgoucGFnZS1pdGVtIHsKICAgIGJvcmRlcjogMCBzb2xpZCB0cmFuc3BhcmVudDsKICAgIGJhY2tncm91bmQ6ICMzYTNhM2Q7CiAgICBib3JkZXItcmFkaXVzOiA4cHg7CiAgICBib3gtc2hhZG93OiAwIDZweCAxNHB4IC02cHggcmdiYSgyNCwgMzksIDc1LCAwLjEyKSwgMCAxMHB4IDMycHggLTRweCByZ2JhKDI0LCAzOSwgNzUsIDAuMSksIGluc2V0IDAgMCAycHggMXB4IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4wNSk7CiAgICBoZWlnaHQ6IDYwcHg7CiAgICBtYXJnaW4tdG9wOiAxNnB4OwogICAgbWFyZ2luLWxlZnQ6IC01JTsKICAgIG1hcmdpbi1yaWdodDogLTUlOwp9CgouZW1iZWQtd3JhcCBpZnJhbWUsCi5saW5rLWVhY2gtaW1hZ2UsCi5wYWdlLWl0ZW0td3JhcCB7CiAgICBib3JkZXItcmFkaXVzOiA4cHg7Cn0KCi5wYWdlLXRleHQtZm9udCB7CiAgICBmb250LWZhbWlseTogIkludGVyIiwgc2Fucy1zZXJpZjsKfQoKLnBhZ2UtdGV4dC1jb2xvciB7CiAgICBjb2xvcjogI2ZmZmZmZjsKfQoKLnNvY2lhbC1pY29uLWZpbGwgY2lyY2xlLAouc29jaWFsLWljb24tZmlsbCBwYXRoLAouc29jaWFsLWljb24tZmlsbCByZWN0IHsKICAgIGZpbGw6IHdoaXRlOwp9CgouZ2xvdy1vbi1ob3ZlciB7CiAgICB3aWR0aDogMTUwcHg7CiAgICBoZWlnaHQ6IDUwcHg7CiAgICBib3JkZXI6IG5vbmU7CiAgICBvdXRsaW5lOiBub25lOwogICAgY29sb3I6ICNmZmY7CiAgICBiYWNrZ3JvdW5kOiAjMTExOwogICAgY3Vyc29yOiBwb2ludGVyOwogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgei1pbmRleDogMDsKICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAvKgp0ZXh0LXNoYWRvdzogMnB4IDJweCBibHVlOyovCgp9CgouZ2xvdy1vbi1ob3ZlcjpiZWZvcmUgewogICAgY29udGVudDogJyc7CgogICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCAjZmYwMDAwLCAjZmY3MzAwLCAjZmZmYjAwLCAjNDhmZjAwLCAjMDBmZmQ1LCAjMDAyYmZmLCAjN2EwMGZmLCAjZmYwMGM4LCAjZmYwMDAwKTsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHRvcDogLTJweDsKICAgIGxlZnQ6IC0ycHg7CiAgICBiYWNrZ3JvdW5kLXNpemU6IDQwMCU7CiAgICB6LWluZGV4OiAtMTsKICAgIGZpbHRlcjogYmx1cig1cHgpOwogICAgd2lkdGg6IGNhbGMoMTAwJSArIDRweCk7CiAgICBoZWlnaHQ6IGNhbGMoMTAwJSArIDRweCk7CiAgICBhbmltYXRpb246IGdsb3dpbmcgMjBzIGxpbmVhciBpbmZpbml0ZTsKICAgIG9wYWNpdHk6IDA7CiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZS1pbi1vdXQ7CiAgICBib3JkZXItcmFkaXVzOiAxMHB4OwoKfQoKLmdsb3ctb24taG92ZXI6YWN0aXZlIHsKICAgIGNvbG9yOiAjMDAwOwp9CgouZ2xvdy1vbi1ob3ZlcjphY3RpdmU6YWZ0ZXIgewogICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7Cn0KCi5nbG93LW9uLWhvdmVyOmhvdmVyOmJlZm9yZSB7CiAgICBvcGFjaXR5OiAxOwoKfQoKLmdsb3ctb24taG92ZXI6YWZ0ZXIgewogICAgei1pbmRleDogLTE7CiAgICBjb250ZW50OiAnJzsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OiAxMDAlOwogICAgYmFja2dyb3VuZDogIzExMTsKICAgIGxlZnQ6IDA7CiAgICB0b3A6IDA7CiAgICBib3JkZXItcmFkaXVzOiAxMHB4OwoKfQoKQGtleWZyYW1lcyBnbG93aW5nIHsKICAgIDAlIHsKICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwIDA7CiAgICB9CiAgICA1MCUgewogICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDQwMCUgMDsKICAgIH0KICAgIDEwMCUgewogICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAgMDsKICAgIH0KfQoKaW1nLmRpc3BsYXktaW1hZ2UubS1hdXRvLmdyYWRpZW50LWJvcmRlciB7CiAgICBib3JkZXI6IDVweCBzb2xpZCAjMjVhYWUyOwogICAgYm9yZGVyLXJhZGl1czogNTAlOwp9CgouZGlzcGxheS1pbWFnZSwKLnBhZ2UtaW1hZ2UgewogICAgLW8tb2JqZWN0LWZpdDogY292ZXI7CiAgICBvYmplY3QtZml0OiBjb3ZlcjsKfQoKLmRpc3BsYXktaW1hZ2UgewogICAgd2lkdGg6IDk2cHg7CiAgICBoZWlnaHQ6IDk2cHg7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIGJvcmRlci1yYWRpdXM6IDUwJTsKfQpjYW52YXMucGFydGljbGVzLWpzLWNhbnZhcy1lbCB7CgogICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KGJsYWNrLCAjNDE0MzQ1KTsKfQoKLm1vZGFsIHsKICAgIGRpc3BsYXk6IG5vbmU7CiAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICB6LWluZGV4OiAxOwogICAgbGVmdDogMDsKICAgIHRvcDogMDsKICAgIHdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OiAxMDAlOwogICAgb3ZlcmZsb3c6IGF1dG87CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuNCk7Cn0KCi5tb2RhbC1jb250ZW50IHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNmZWZlZmU7CiAgICBtYXJnaW46IDE1JSBhdXRvOwogICAgcGFkZGluZzogMjBweDsKICAgIGJvcmRlcjogMXB4IHNvbGlkICM4ODg7CiAgICB3aWR0aDogODAlOwp9CgouY2xvc2UgewogICAgY29sb3I6ICNhYWE7CiAgICBmbG9hdDogcmlnaHQ7CiAgICBmb250LXNpemU6IDI4cHg7CiAgICBmb250LXdlaWdodDogYm9sZDsKfQoKLmNsb3NlOmZvY3VzLAouY2xvc2U6aG92ZXIgewogICAgY29sb3I6IGJsYWNrOwogICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogICAgY3Vyc29yOiBwb2ludGVyOwp9CgoKCi5wb3B1cCB7CiAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICB0b3A6IDA7CiAgICBsZWZ0OiAwOwogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IDEwMCU7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7CiAgICBkaXNwbGF5OiBmbGV4OwogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgei1pbmRleDogOTk5OTsKICAgIG9wYWNpdHk6IDA7CiAgICB2aXNpYmlsaXR5OiBoaWRkZW47CiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZS1pbi1vdXQsIHZpc2liaWxpdHkgMC4zcyBlYXNlLWluLW91dDsKCgogIH0KCgoKICAKICAucG9wdXAtY29udGVudCB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjODA4MDgwOwogICAgcGFkZGluZy1sZWZ0OiAxNSU7CiAgICBwYWRkaW5nLXJpZ2h0OiAxNSU7CiAgICAvKiBwYWRkaW5nOiAyMHB4OyAqLwogICAgYm9yZGVyLXJhZGl1czogNXB4OwogICAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjUpOwogICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgYm90dG9tOiAwOwogICAgYm9yZGVyLXJhZGl1czogMjVweDsKICB9CiAgCiAgLmNsb3NlLWJ0biB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDAzZTNmOwogICAgY29sb3I6IHllbGxvdzsKICAgIGJvcmRlcjogbm9uZTsKICAgIHBhZGRpbmc6IDEwcHggNTVweDsKICAgIGJvcmRlci1yYWRpdXM6IDVweDsKICAgIGN1cnNvcjogcG9pbnRlcjsKICAgIG1hcmdpbi10b3A6IDA7CiAgICBib3R0b206IDU1cHg7CiAgICBtYXJnaW4tbGVmdDogLTEyJTsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB9CgogIGltZy5hZGR0b2hvbWVzY3JlZW4gewogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgd2lkdGg6IDFlbTsKICAgIGhlaWdodDogMWVtOwogICAgY29udGFpbjogc3RyaWN0OwogICAgZmlsbDogY3VycmVudGNvbG9yOwogICAgYm94LXNpemluZzogY29udGVudC1ib3ggIWltcG9ydGFudDsKfQppbWcuYWRkdG9ob21lc2NyZWVuMSB7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICB3aWR0aDogNWVtOwogICAgaGVpZ2h0OiA1ZW07CiAgICBtYXJnaW4tbGVmdDogMzAlOwogICAgbWFyZ2luLXJpZ2h0OiAtMzAlOwp9Ci8qCmJ1dHRvbi5jbG9zZS1idG4gewogICAgbGVmdDogNzAlOwogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgYmFja2dyb3VuZDogcmVkOwp9Ki8KaDIuaDJkdGMgewogICAgbWFyZ2luOiAycHg7Cn0KCnAucGR0YyB7CiAgICBtYXJnaW46IDBweDsKICAgIGZvbnQtc2l6ZTogOTAlOwp9CiNwb3B1cC5oaWRkZW4gewogICAgZGlzcGxheTogbm9uZTsKICB9Ci5wb3B1cC5oaWRkZW4gewogICAgZGlzcGxheTogbm9uZTsKfQoKCiAgLnRyaWFuZ2xlLWRvd24gewogICAgYm9yZGVyLWxlZnQ6IDIwcHggc29saWQgdHJhbnNwYXJlbnQ7CiAgICBib3JkZXItcmlnaHQ6IDIwcHggc29saWQgdHJhbnNwYXJlbnQ7CiAgICBib3JkZXItdG9wOiAyMHB4IHNvbGlkICM4MDgwODA7CiAgICAvKiBib3JkZXItYm90dG9tOiAyMHB4IHNvbGlkIHRyYW5zcGFyZW50OyAqLwogICAgZGlzcGxheTogaW5saW5lLWdyaWQ7CiAgICBib3R0b206IC0yMHB4OwogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgfQoKCgpAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2MDBweCkgewogICAgLnBvcHVwIHsKICAgICAgcG9zaXRpb246IGZpeGVkOwogICAgICB0b3A6IDA7CiAgICAgIGxlZnQ6IDA7CiAgICAgIHdpZHRoOiAxMDAlOwogICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTsKICAgICAgZGlzcGxheTogZmxleDsKICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgIHotaW5kZXg6IDk5OTk7CiAgICAgIG9wYWNpdHk6IDA7CiAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjsKICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzIGVhc2UtaW4tb3V0LCB2aXNpYmlsaXR5IDAuM3MgZWFzZS1pbi1vdXQ7CiAgICB9CiAgICAKICAgIC5wb3B1cC1jb250ZW50IHsKICAgICAgLyogYmFja2dyb3VuZC1jb2xvcjogIzgwODA4MDsgKi8KICAgICAgLyogcGFkZGluZzogMjBweDsgKi8KICAgICAgLyogYm9yZGVyLXJhZGl1czogNXB4OyAqLwogICAgICAvKiBib3gtc2hhZG93OiAwIDAgMTBweCByZ2JhKDAsIDAsIDAsIDAuNSk7ICovCiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgbWFyZ2luOiAwJSAxNSUgMCAxNSU7CiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgYm90dG9tOiAyNXB4OwogICAgICBib3JkZXItcmFkaXVzOiA1MHB4OwogICAgfQogICAgCiAgICAuY2xvc2UtYnRuIHsKICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzQwM2UzZjsKICAgICAgY29sb3I6IHllbGxvdzsKICAgICAgYm9yZGVyOiBub25lOwogICAgICBwYWRkaW5nOiAxMHB4IDQwcHg7CiAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsKICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICBtYXJnaW4tdG9wOiAwOwogICAgICBtYXJnaW4tbGVmdDogLTIwJTsKICAgICAgYm90dG9tOiA3NXB4OwogICAgfQogIAogICAgaW1nLmFkZHRvaG9tZXNjcmVlbiB7CiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgd2lkdGg6IDFlbTsKICAgICAgaGVpZ2h0OiAxZW07CiAgICAgIGNvbnRhaW46IHN0cmljdDsKICAgICAgZmlsbDogY3VycmVudGNvbG9yOwogICAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveCAhaW1wb3J0YW50OwogIH0KICBpbWcuYWRkdG9ob21lc2NyZWVuMSB7CiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgd2lkdGg6IDVlbTsKICAgICAgaGVpZ2h0OiA1ZW07CiAgfQogICAgfQoKCgoKICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ1MHB4KSB7CiAgICAgICAgLnBvcHVwIHsKICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDsKICAgICAgICAgIHRvcDogMDsKICAgICAgICAgIGxlZnQ6IDA7CiAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgIGhlaWdodDogMTAwJTsKICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTsKICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgICB6LWluZGV4OiA5OTk5OwogICAgICAgICAgb3BhY2l0eTogMDsKICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjsKICAgICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcyBlYXNlLWluLW91dCwgdmlzaWJpbGl0eSAwLjNzIGVhc2UtaW4tb3V0OwogICAgICAgIH0KICAgICAgICAKICAgICAgICAucG9wdXAtY29udGVudCB7CiAgICAgICAgICAvKiBiYWNrZ3JvdW5kLWNvbG9yOiAjODA4MDgwOyAqLwogICAgICAgICAgLyogcGFkZGluZzogMjFweDsgKi8KICAgICAgICAgIC8qIGJvcmRlci1yYWRpdXM6IDVweDsgKi8KICAgICAgICAgIC8qIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC41KTsgKi8KICAgICAgICAgIC8qIHBhZGRpbmctbGVmdDogNDBweDsgKi8KICAgICAgICAgIC8qIHBhZGRpbmctcmlnaHQ6IDQwcHg7ICovCiAgICAgICAgICBtYXJnaW46IDAlIDclIDAgMTAlOwogICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgICAgYm90dG9tOiAyNXB4OwogICAgICAgICAgYm9yZGVyLXJhZGl1czogNTBweDsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLmNsb3NlLWJ0biB7CiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDAzZTNmOwogICAgICAgICAgY29sb3I6IHllbGxvdzsKICAgICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICAgIHBhZGRpbmc6IDEwcHggNTBweDsKICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsKICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgIG1hcmdpbi10b3A6IDA7CiAgICAgICAgICBtYXJnaW4tbGVmdDogLTMwJTsKICAgICAgICAgIGJvdHRvbTogNTVweDsKICAgICAgICB9CiAgICAgIAogICAgICAgIGltZy5hZGR0b2hvbWVzY3JlZW4gewogICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgd2lkdGg6IDFlbTsKICAgICAgICAgIGhlaWdodDogMWVtOwogICAgICAgICAgY29udGFpbjogc3RyaWN0OwogICAgICAgICAgZmlsbDogY3VycmVudGNvbG9yOwogICAgICAgICAgYm94LXNpemluZzogY29udGVudC1ib3ggIWltcG9ydGFudDsKICAgICAgfQogICAgICBpbWcuYWRkdG9ob21lc2NyZWVuMSB7CiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICAgICAgICB3aWR0aDogM2VtOwogICAgICAgICAgaGVpZ2h0OiAzZW07CiAgICAgIH0KICAgICAgICB9CiAgICAgIAoKICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4tZGV2aWNlLXdpZHRoOiA3NjhweCkgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiAxMDI0cHgpIHsKICAgICAgICAgICAgLnBvcHVwIHsKICAgICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICAgICAgICAgICAgdG9wOiAwOwogICAgICAgICAgICAgIGxlZnQ6IDA7CiAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTsKICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgICAgICAgei1pbmRleDogOTk5OTsKICAgICAgICAgICAgICBvcGFjaXR5OiAwOwogICAgICAgICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjsKICAgICAgICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZS1pbi1vdXQsIHZpc2liaWxpdHkgMC4zcyBlYXNlLWluLW91dDsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgLnBvcHVwLWNvbnRlbnQgewogICAgICAgICAgICAgIC8qIGJhY2tncm91bmQtY29sb3I6ICM4MDgwODA7ICovCiAgICAgICAgICAgICAgLyogcGFkZGluZzogMjFweDsgKi8KICAgICAgICAgICAgICAvKiBib3JkZXItcmFkaXVzOiA1cHg7ICovCiAgICAgICAgICAgICAgLyogYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjUpOyAqLwogICAgICAgICAgICAgIC8qIHBhZGRpbmctbGVmdDogNDBweDsgKi8KICAgICAgICAgICAgICAvKiBwYWRkaW5nLXJpZ2h0OiA0MHB4OyAqLwogICAgICAgICAgICAgIG1hcmdpbjogMCUgNyUgMCAxMCU7CiAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgICBib3R0b206IDI1cHg7CiAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNTBweDsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgLmNsb3NlLWJ0biB7CiAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzQwM2UzZjsKICAgICAgICAgICAgICBjb2xvcjogeWVsbG93OwogICAgICAgICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDUwcHg7CiAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4OwogICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAwOwogICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAtMjAlOwogICAgICAgICAgICAgIGJvdHRvbTogNTVweDsKICAgICAgICAgICAgfQogICAgICAgICAgCiAgICAgICAgICAgIGltZy5hZGR0b2hvbWVzY3JlZW4gewogICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgICAgICAgICB3aWR0aDogMWVtOwogICAgICAgICAgICAgIGhlaWdodDogMWVtOwogICAgICAgICAgICAgIGNvbnRhaW46IHN0cmljdDsKICAgICAgICAgICAgICBmaWxsOiBjdXJyZW50Y29sb3I7CiAgICAgICAgICAgICAgYm94LXNpemluZzogY29udGVudC1ib3ggIWltcG9ydGFudDsKICAgICAgICAgIH0KICAgICAgICAgIGltZy5hZGR0b2hvbWVzY3JlZW4xIHsKICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICAgICAgICAgICAgd2lkdGg6IDNlbTsKICAgICAgICAgICAgICBoZWlnaHQ6IDNlbTsKICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgCiAgICAKICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpIHsKICAgICAgICAgICAgICAgIC5wb3B1cCB7CiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkOwogICAgICAgICAgICAgICAgICAgIHRvcDogMDsKICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwOwogICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTsKICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7CiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IDk5OTk7CiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMDsKICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47CiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzIGVhc2UtaW4tb3V0LCB2aXNpYmlsaXR5IDAuM3MgZWFzZS1pbi1vdXQ7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIC5wb3B1cC1jb250ZW50IHsKICAgICAgICAgICAgICAgICAgICAvKiBiYWNrZ3JvdW5kLWNvbG9yOiAjODA4MDgwOyAqLwogICAgICAgICAgICAgICAgICAgIC8qIHBhZGRpbmc6IDIxcHg7ICovCiAgICAgICAgICAgICAgICAgICAgLyogYm9yZGVyLXJhZGl1czogNXB4OyAqLwogICAgICAgICAgICAgICAgICAgIC8qIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC41KTsgKi8KICAgICAgICAgICAgICAgICAgICAvKiBwYWRkaW5nLWxlZnQ6IDQwcHg7ICovCiAgICAgICAgICAgICAgICAgICAgLyogcGFkZGluZy1yaWdodDogNDBweDsgKi8KICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAlIDBlbSAwIDE4ZW07CiAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDsKICAgICAgICAgICAgICAgICAgICBib3R0b206IDUwJTsKICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MHB4OwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAuY2xvc2UtYnRuIHsKICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDAzZTNmOwogICAgICAgICAgICAgICAgICAgIGNvbG9yOiB5ZWxsb3c7CiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEwcHggNTBweDsKICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7CiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7CiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IC0xMGVtOwogICAgICAgICAgICAgICAgICAgIGJvdHRvbTogNzBweDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIGltZy5hZGR0b2hvbWVzY3JlZW4gewogICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgICAgICAgICAgICAgICB3aWR0aDogMWVtOwogICAgICAgICAgICAgICAgICAgIGhlaWdodDogMWVtOwogICAgICAgICAgICAgICAgICAgIGNvbnRhaW46IHN0cmljdDsKICAgICAgICAgICAgICAgICAgICBmaWxsOiBjdXJyZW50Y29sb3I7CiAgICAgICAgICAgICAgICAgICAgYm94LXNpemluZzogY29udGVudC1ib3ggIWltcG9ydGFudDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGltZy5hZGR0b2hvbWVzY3JlZW4xIHsKICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDNlbTsKICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDNlbTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC50cmlhbmdsZS1kb3duIHsKICAgICAgICAgICAgICAgICAgICBib3JkZXItbGVmdDogMjBweCBzb2xpZCB0cmFuc3BhcmVudDsKICAgICAgICAgICAgICAgICAgICBib3JkZXItcmlnaHQ6IDIwcHggc29saWQgdHJhbnNwYXJlbnQ7CiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMjBweCBzb2xpZCAjODA4MDgwOwogICAgICAgICAgICAgICAgICAgIGJvcmRlci10b3A6IDIwcHggc29saWQgdHJhbnNwYXJlbnQ7CiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWdyaWQ7CiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAxNDBweDsKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgICAgICAgICAgICAgICAgbGVmdDogNmVtOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgIAogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIA==');